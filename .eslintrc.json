{
    "plugins": [
        "@typescript-eslint",
        "import"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "env": {
        "node": true,
        "mocha": true,
        "es6": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended-type-checked",
        "plugin:@typescript-eslint/stylistic-type-checked",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "prettier"
    ],
    "rules": {
        "indent": "off", // Defer to typescript indent rule
        "no-trailing-spaces": "error",
        "no-nested-ternary": "error",
        "no-fallthrough": "error",
        "semi": [
            "error",
            "always"
        ],
        "eol-last": [
            "error",
            "always"
        ],
        "no-return-await": "off",
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "import/no-named-as-default": "off",
        "import/namespace": "off",
        "import/order": "error",
        "max-len": [
            "warn",
            {
                "code": 100,
                "ignorePattern": "^import .*"
            }
        ],
        "use-isnan": "warn",
        "no-useless-escape": "warn",
        "no-const-assign": "error",
        "no-constant-condition": "error",
        // Spacing
        "space-before-blocks": "error",
        "keyword-spacing": "error",
        "comma-spacing": "error",
        "arrow-spacing": "error",
        "block-spacing": "error",
        "key-spacing": "error",
        "semi-spacing": "error",
        "array-bracket-spacing": "error",
        "switch-colon-spacing": "error",
        "computed-property-spacing": "error",
        "func-call-spacing": "error",
        "space-before-function-paren": [
            "error",
            {
                "named": "never",
                "anonymous": "always",
                "asyncArrow": "always"
            }
        ],
        "space-in-parens": "error",
        "space-infix-ops": "error",
        "space-unary-ops": "error",
        "spaced-comment": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-case-declarations": "off",
        // TypeScript specific rules.
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-object-literal-type-assertion": "off",
        "@typescript-eslint/no-use-before-define": "off",
        // todo: Fix code and turn these on in subsequent PRs
        "@typescript-eslint/no-empty-interface": "off",
        "@typescript-eslint/explicit-member-accessibility": "off",
        "@typescript-eslint/camelcase": "off",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-unused-vars": "warn",
        "@typescript-eslint/no-triple-slash-reference": "off",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/return-await": [
            "error",
            "always"
        ],
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-unsafe-return": "warn",
        "@typescript-eslint/no-unsafe-assignment": "warn",
        "@typescript-eslint/require-await": "warn",
        "@typescript-eslint/no-unsafe-member-access": "warn",
        "@typescript-eslint/no-unsafe-argument": "warn",
        "@typescript-eslint/no-unsafe-call": "warn",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/no-unsafe-enum-comparison": "warn",
        "@typescript-eslint/restrict-template-expressions": "warn",
        "@typescript-eslint/unbound-method": "warn",
        "@typescript-eslint/no-base-to-string": "warn",
        "@typescript-eslint/no-floating-promises": [
            "error",
            {
                "ignoreVoid": true,
                "ignoreIIFE": true
            }
        ],
        "@typescript-eslint/no-misused-promises": [
            "error",
            {
                "checksVoidReturn": false,
                "checksConditionals": false
            }
        ],
        "@typescript-eslint/ban-ts-comment": [
            "warn",
            {
                "ts-nocheck": "allow-with-description",
                "ts-ignore": "allow-with-description",
                "ts-expect-error": "allow-with-description"
            }
        ]
    }
}